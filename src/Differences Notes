# POINTS

#. Difference b/w Anonymous class & Lamda expression
> Anonymous class has constructor, method and variables defined whereas
  Lamda expression has anonymous method
> Anonymous class has to be used where we want to work on variables whereas
  Lamda expression must be used to call method
> Anonymous class 'this' variable refers to anonymous class  defined whereas
  Lamda expression 'this' variable refers to enclosing class
> Anonymous class variables can be final and non-final whereas
  Lamda expression has variables final in nature
> Anonymous class return type can be interface or functional interface whereas
  Lamda expression return type has to be functional interface
> Anonymous class can have more than one abstract method whereas
  Lamda expression can have only one abstract method

#. Difference b/w Function, Predicate
> Both accepts one parameter but predicate returns boolean whereas function returns object
> Predicate only defines the parameter where as function defines both parameter and return type as well

#. Difference b/w Function, Consumer
> Both accepts one parameter but consumer returns void whereas function returns object
> Consumer only defines the parameter where as function defines both parameter and return type as well

#. Difference b/w Function, Supplier
> Supplier doesn't accept parameter but returns object whereas function accepts parameter and returns object
> Supplier only defines the return type where as function defines both parameter and return type as well

#. Difference b/w Predicate, Consumer
> Both accepts one parameter but consumer returns void whereas predicate returns boolean

#. Difference b/w Supplier, Consumer
> Supplier doesn't accept parameter but returns object Consumer accepts parameter and returns void

#. Difference b/w Interface vs Abstract class
> Interface must be declared with keyword 'interface' where as 
Abstract class must be declared with keyword 'abstract'
> Interface contains variables which are final (Constants) where as 
Abstract class can contain both
> Interface doesn't define constructor, final method where as 
Abstract class can
> Interface contains abstract, default & static method where as 
Abstract class cannot define default methods but rest it can declare
> Interface can extends to interfaces where as 
Abstract class can be extended from a class and implement multiple interfaces
> Default Method Functional interface can be used to refer lamda expression where as
abstract class cannot

#. Difference b/w Streams vs Collections
> Collections which contains the actual data whereas
Streams can only process the collection data
> Collections can add or remove elements whereas
Streams cannot add or remove elements [Fixed Data Structure]
> Collections can be traverse multiple times using normal operations like forEach whereas
Streams can traverse the collection data only once
> Collections are eagerly loaded or constructed whereas
Streams are lazy loaded or constructed collection
> Collections performs external iterations whereas
Streams performs internal iterations

#. Stateful Vs Stateless Operations
> Stateful operations are those operations which depends on the internal state to accumulate result
whereas Stateless operations does not
> Stateful Functions - distinct, limit, skip, sorted, reduce
> Stateless Functions - filter, map etc..

#. Bounded Vs UnBounded Operations
> Bounded operations are those operations which has a boundary where as 
UnBounded operations does not
> Bounded Functions - limit, skip, sorted, reduce
> UnBounded Functions - distinct, sorted etc..

# Difference between Non-Functional interface & Functional Interface
- Functional Interface can only have single abstract method where as
Non-functional interface can declare many or one or none
- In Functional Interface, abstract method needs to be declared mandatory where as
Non-functional interface it is optional
- Functional interface are specifically designed for lamda expression where as
Non-functional interface are optional to use

# Difference between stream operations and Collector operations
- 