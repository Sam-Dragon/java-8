***************************************** FORK/JOIN Framework *************************************
# Fork Join Framework

> it splits the the parallelize tasks into smaller tasks recursively
& then combine overall result
> it is an implementation of 'ExecutorService'
> It distributes the tasks in a thread pool called 'ForkJoinPool'
> It uses DivideAndConquer technique to break the tasks
> It extends from RecursiveTask

# ForkJoin Pool
- It is used under Parallelism
- It contains threads equal to system cores
- All threads are present in Common Pool & can be re-used

# Best Practices
- join() must be called after starting all the sub-tasks else performance issues are expected
- invoke() of ForkJoinPool must not be invoked under RecursiveTask<T>.
It is meant for sequential calls only
- Calling fork() method on sub-task actually schedules on ForkJoinPool
but prevent invoking fork() on all subtasks else in increases number of threads
and consumes more memory
- Calling compute() method on any of subtasks gives thread re-usability
and prevents overhead on unnecessary allocation for further task
- Debugging can be tricky

# work stealing
- It is the process of stealing the task of another threads
- It can be done via spliterator [Designed for parallel execution]