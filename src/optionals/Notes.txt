**************************************** OPTIONAL ***********************************************

> Problems with NULL
    - Its a source of error
    - It bloats the code
    - Its meaningless
    - It breaks Java Philosophy
    - It creates hole in the system 

> It is a class which specify the value presence / absence
> It can be treated same as streams
> It order to prevent NullPointerException & to define absence of value instead of NULL
> empty() is a special singleton instance of the optional 
> - filter, map, flatMap internally handle optional so optional<> declaration of variable 
wont be required

# Creating Optional Objects [Static Methods]
> Optional.empty() - Specifies the absence of value & can be used to initialize any optional
> Optional.of() - Returns a non-null value if present else NullPointerException. 
Not recommended
> Optional.ofNullable() - Returns a value if present else returns empty optional.
Highly recommended

# Chaining Optional methods
> filter() - similar to stream filter method but difference is it returns value if present
else throws NoSuchElementException
> map() - similar to stream map method but difference is it returns optional 
but if provided orElse() then it returns the corresponding value
> flatMap() - similar to stream flatmap method where it flattens the 
optional<optional<String>> to optional<String>

> Map vs FlatMap
- Map can require orElse for each nested value whereas flatMap just need orElse in the terminal 

# Optional Methods
> get() - returns the value if present else throws NoSuchElementException
> orElse(T) - returns the value if present else returns default value
> orElseGet(Supplier) - returns the value if present else returns value from supplier
> orElseThrow(Supplier) - returns the value if present else throw exception
> IfPresent(Consumer) - returns the value if present else no action
> IsPresent() - returns true if present else false

# Combining Optional
> It can be done using map and flatMap methods

# filtering optional
> It is similar to stream filter method but in optional we will extract the value and perform
operations

# Primitive Optional
- Never use OptionalInt, OptionalLong, OptionalDouble as it can contain single value
- It can hit the performance
- It may not allow all operations to work on it

Note: Optionals must not be used as variables for models/entities as they are not serializable
