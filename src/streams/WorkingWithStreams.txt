****************************************** STREAMS OPERATIONS **************************************

# Filtering And Slicing
- Basically, we will be selecting the elements either based on condition or by skipping or fetching 
particular set

# Filtering A Predicate
- It accepts lambda expression & basically returns BOOLEAN value. Basically a PREDICATE
- filter(Predicate p) is used

# Filtering Unique Elements
- To remove duplicates elements 
- distinct() method is used

# Truncating a Stream
- To retrieve only specified number of elements and exclude others
- limit(n) where n - number of elements

# Slicing Elements
- To skip only specified number of elements and include others
- skip(n) where n - number of elements

# Mapping
- Basically, we will be selecting specified columns

# Mapping a Function
- It can be used to select a single column or all columns
- It accepts lambda expression & basically returns object value. Basically a Function
- map(Function f) is used
- It skips optional values
> Disadvantage : We cannot select arbitrary or multiple columns
> Special Case : Function can be replaced with PREDICATE or UNARY OPERATOR

# Flat Mapping a Function
- It can be used to select a single column or all columns
- It can also be used to flatten the streams i.e. Stream<Stream<String>> --> Stream<String>
- It accepts lambda expression & basically returns object value. Basically a Function
- flatMap(Stream<Function> f) is used
- It skips optional values
> Disadvantage : We cannot select arbitrary or multiple columns
> Special Case : Function can be replaced with PREDICATE or UNARY OPERATOR

# Finding And Matching
- Basically, we will be matching the condition with all the elements of the set. 
May not iterate the whole set until one condition matches

# Matching all Elements of set
- It basically returns true if all elements matches
- It accepts lambda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit AND operation
- allMatch(Predicate p) is used

# Matching any Elements of set
- It basically returns true if any of the element matches
- It accepts lambda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit OR operation
- anyMatch(Predicate p) is used

# Matching none of Elements of set
- It basically returns true if none of the elements matches. Reverse of allMatch()
- It accepts lambda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit NOT operation
- noneMatch(Predicate p) is used

# Find Any Element for Set
- It gives the any matching element
- It basically returns optional<T> whether element is found or not
- It must be used in parallel streams
- findAny() is used

# Find First Element for Set
- It gives the first matching element
- It basically returns optional<T> whether element is found or not
- It must be used in sequential streams
- findFirst() is used

# Reducing
- Basically, we will be perform operations to achieve single value
- It is also called as fold [because we keep performing iterations to get single value]

# Summing, Counting , Maximum & Minimum of elements
- Basically performing mathematical operations such as addition, maximum, minimum, count etc.. 
- It can be provided with reduce operation in two ways
  - first, we can provide initial value which is default if stream is empty
  - second, we wont provide initial value in which case Optional<?> value will be returned

# Numeric Streams
- Streams specially designed to deal with number operations
- It is mainly added to save the performance cost which is caused due to BOXING & UNBOXING
- It was introduced to improve performance
- It is achieved through primitive stream specialization

# Primitive Stream Specialization
- It supports IntStream, LongStream & DoubleStream
- It provides some built-in functions such as max, min, count, statistics etc..

# Mapping To Numeric Stream
- It can be done via specialized methods such as mapToInt, mapToLong & mapToDouble
- It returns Stream<T>

# Convert primitive Numeric Stream to Stream of objects
- It can be done by calling boxed() method on the primitive Stream

# Default Values for Primitive Streams : Optional
- If we use any primitive streams method such as mapToInt then the result would be OptionalInt
not Optional<Integer>
- OptionalInt, OptionalLong, OptionalDouble are specialized return type for number streams  

# Advantages of Numeric Streams
- We can modify the number datatype using mapTo functions and obtain the result

# Numeric Ranges
- It is used for generating the number streams
- A common use-case when dealing with numbers
- It is applicable on two class IntStream & LongStream
- For above class, following static methods are applied 
    - range : the end value is exclusive
    - rangeClosed : the end value is inclusive