******************************************* FUNCTION ***********************************************
[package function_interface.pack]

1. Function accepts Target type but results can be same/different Target type
2. Function operations
   [static]   > identity - create instance
- This is inherited from function interface
   [abstract] > apply - evaluates the function
   [default]  > andThen - evaluates the first expression and then replaces the same in second one
   [default]  > compose - evaluates the second expression and then replaces the same in first one
4. Function Chaining
   > andThen, compose
3. BiFunction same as that of function but accepts extra arguments in lamda expression
4. BiFunction function
   [default]  > andThen - BiFunction gets evaluated and then replaces the function

# Primitive Specialization 
1. Prevents boxing of primitives & provides better performance
2. Remember that primitive specialization doesn't required any target type to be specified 
3. Function supports
    - IntFunction, LongFunction, DoubleFunction, IntToLongFunction, IntToDoubleFunction,
      LongToIntFunction, LongToDoubleFunction, ToIntFunction , ToLongFunction, ToDoubleFunction 
4. BiFunction supports  
    - ToIntBiFunction, ToLongBiFunction, ToDoubleBiFunction 

# Issues
1. Function<void> & BiFunction<void> doesn't work

Note : Always mark the custom functional interface with @FunctionalInterface annotation for safety 
purpose