# Filtering And Slicing
- Basically, we will be selecting the elements either based on condition or by skipping or fetching 
particular set

# Filtering A Predicate
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- filter(Predicate p) is used

# Filtering Unique Elements
- To remove duplicates elements 
- distinct() method is used

# Truncating a Stream
- To retrieve only specified number of elements and exclude others
- limit(n) where n - number of elements

# Slicing Elements
- To skip only specified number of elements and include others
- skip(n) where n - number of elements

# Mapping
- Basically, we will be selecting specified columns

# Mapping a Function ***** YET TO ADD
- It can be used to select a single column or all columns
- It accepts lamda expression & basically returns object value. Basically a Function
- map(Function f) is used
- It skips optional values
> Disadvantage : We can select arbitrary columns
> Special Case : Function can be replaced with PREDICATE or UNARYOPERATOR

# Flat Mapping a Function ***** YET TO ADD
- It can be used to select a single column or all columns
- It can also be used to flatten the streams i.e. Stream<Stream<String>> --> Stream<String>
- It accepts lamda expression & basically returns object value. Basically a Function
- flatMap(Function f) is used
- It skips optional values
> Disadvantage : We can select arbitrary columns

# Finding And Matching
- Basically, we will be matching the condition with all the elements of the set. 
May not iterate the whole set until one condition matches

# Matching all Elements of set
- It basically returns true if all elements matches
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit AND operation
- allMatch(Predicate p) is used

# Matching any Elements of set
- It basically returns true if any elements matches
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit OR operation
- anyMatch(Predicate p) is used

# Matching none of Elements of set
- It basically returns true if none of the elements matches. Reverse of allMatch()
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- Short circuit NOT operation
- noneMatch(Predicate p) is used

# Find Any Element for Set
- It gives the any matching element
- It basically returns optional<T> whether element matches or not
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- It must be used in parallel streams

# Find First Element for Set
- It gives the first matching element
- It basically returns optional<T> whether element matches or not
- It accepts lamda expression & basically returns BOOLEAN value. Basically a PREDICATE
- It must be used in sequencial streams


# PENDING
1. Chain allMatch, noneMatch, anyMatch & see the result